// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/commotions.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// run
std::vector<Rcpp::List> run(arma::vec time, Rcpp::List para, arma::mat pos, arma::mat goal, arma::mat so, arma::mat ao, std::vector<double> ss, std::vector<double> sa, arma::mat obstacles, std::vector<double> cd);
RcppExport SEXP _commotions_run(SEXP timeSEXP, SEXP paraSEXP, SEXP posSEXP, SEXP goalSEXP, SEXP soSEXP, SEXP aoSEXP, SEXP ssSEXP, SEXP saSEXP, SEXP obstaclesSEXP, SEXP cdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type so(soSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ao(aoSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sa(saSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type obstacles(obstaclesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cd(cdSEXP);
    rcpp_result_gen = Rcpp::wrap(run(time, para, pos, goal, so, ao, ss, sa, obstacles, cd));
    return rcpp_result_gen;
END_RCPP
}
// test_P2P
Rcpp::List test_P2P(std::vector<double> time, Rcpp::List para, arma::mat pos, arma::mat goal, arma::mat so, arma::mat ao, std::vector<double> ss, std::vector<double> sa, arma::mat obstacles, std::vector<double> cd, std::vector<double> sr, std::vector<double> wall);
RcppExport SEXP _commotions_test_P2P(SEXP timeSEXP, SEXP paraSEXP, SEXP posSEXP, SEXP goalSEXP, SEXP soSEXP, SEXP aoSEXP, SEXP ssSEXP, SEXP saSEXP, SEXP obstaclesSEXP, SEXP cdSEXP, SEXP srSEXP, SEXP wallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type so(soSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ao(aoSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sa(saSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type obstacles(obstaclesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sr(srSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type wall(wallSEXP);
    rcpp_result_gen = Rcpp::wrap(test_P2P(time, para, pos, goal, so, ao, ss, sa, obstacles, cd, sr, wall));
    return rcpp_result_gen;
END_RCPP
}
// test_V2V
Rcpp::List test_V2V(std::vector<double> time, Rcpp::List para, arma::mat pos, arma::mat goal, arma::mat so, arma::mat ao, std::vector<double> ss, std::vector<double> sa, arma::mat obstacles, std::vector<double> cd, std::vector<double> sr);
RcppExport SEXP _commotions_test_V2V(SEXP timeSEXP, SEXP paraSEXP, SEXP posSEXP, SEXP goalSEXP, SEXP soSEXP, SEXP aoSEXP, SEXP ssSEXP, SEXP saSEXP, SEXP obstaclesSEXP, SEXP cdSEXP, SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type so(soSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ao(aoSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sa(saSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type obstacles(obstaclesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(test_V2V(time, para, pos, goal, so, ao, ss, sa, obstacles, cd, sr));
    return rcpp_result_gen;
END_RCPP
}
// test_P2V
Rcpp::List test_P2V(std::vector<double> time, Rcpp::List para, arma::mat pos, arma::mat goal, arma::mat so, arma::mat ao, std::vector<double> ss, std::vector<double> sa, arma::mat obstacles, std::vector<double> cd, std::vector<double> sr);
RcppExport SEXP _commotions_test_P2V(SEXP timeSEXP, SEXP paraSEXP, SEXP posSEXP, SEXP goalSEXP, SEXP soSEXP, SEXP aoSEXP, SEXP ssSEXP, SEXP saSEXP, SEXP obstaclesSEXP, SEXP cdSEXP, SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type so(soSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ao(aoSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sa(saSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type obstacles(obstaclesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sr(srSEXP);
    rcpp_result_gen = Rcpp::wrap(test_P2V(time, para, pos, goal, so, ao, ss, sa, obstacles, cd, sr));
    return rcpp_result_gen;
END_RCPP
}
// test_SC_P2V_tmp
Rcpp::List test_SC_P2V_tmp(arma::vec time, Rcpp::List para, arma::mat initial_position, arma::mat destination, arma::mat action0, arma::mat action1, arma::vec initial_speed, arma::vec initial_angle, arma::vec collision_distance, arma::vec conflict_point, arma::uvec optional_assumptions, unsigned int debug);
RcppExport SEXP _commotions_test_SC_P2V_tmp(SEXP timeSEXP, SEXP paraSEXP, SEXP initial_positionSEXP, SEXP destinationSEXP, SEXP action0SEXP, SEXP action1SEXP, SEXP initial_speedSEXP, SEXP initial_angleSEXP, SEXP collision_distanceSEXP, SEXP conflict_pointSEXP, SEXP optional_assumptionsSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_position(initial_positionSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type destination(destinationSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type action0(action0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type action1(action1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial_speed(initial_speedSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial_angle(initial_angleSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type collision_distance(collision_distanceSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type conflict_point(conflict_pointSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type optional_assumptions(optional_assumptionsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(test_SC_P2V_tmp(time, para, initial_position, destination, action0, action1, initial_speed, initial_angle, collision_distance, conflict_point, optional_assumptions, debug));
    return rcpp_result_gen;
END_RCPP
}
// test_regspace
arma::vec test_regspace(double st, double dt, double et);
RcppExport SEXP _commotions_test_regspace(SEXP stSEXP, SEXP dtSEXP, SEXP etSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type st(stSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type et(etSEXP);
    rcpp_result_gen = Rcpp::wrap(test_regspace(st, dt, et));
    return rcpp_result_gen;
END_RCPP
}
// test_armaregspace
arma::vec test_armaregspace(double st, double dt, double et);
RcppExport SEXP _commotions_test_armaregspace(SEXP stSEXP, SEXP dtSEXP, SEXP etSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type st(stSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type et(etSEXP);
    rcpp_result_gen = Rcpp::wrap(test_armaregspace(st, dt, et));
    return rcpp_result_gen;
END_RCPP
}
// test_Kinematics_old
void test_Kinematics_old(arma::mat pos, arma::mat goal, arma::vec speed, arma::vec angle, arma::mat soption, arma::mat yoption);
RcppExport SEXP _commotions_test_Kinematics_old(SEXP posSEXP, SEXP goalSEXP, SEXP speedSEXP, SEXP angleSEXP, SEXP soptionSEXP, SEXP yoptionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type speed(speedSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type soption(soptionSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yoption(yoptionSEXP);
    test_Kinematics_old(pos, goal, speed, angle, soption, yoption);
    return R_NilValue;
END_RCPP
}
// test_Kinematics
void test_Kinematics(List para, arma::mat pos, arma::mat goal, arma::mat so, arma::mat ao, arma::vec ss, arma::vec sa, arma::vec cd, arma::vec sr);
RcppExport SEXP _commotions_test_Kinematics(SEXP paraSEXP, SEXP posSEXP, SEXP goalSEXP, SEXP soSEXP, SEXP aoSEXP, SEXP ssSEXP, SEXP saSEXP, SEXP cdSEXP, SEXP srSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type para(paraSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type so(soSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ao(aoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sa(saSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sr(srSEXP);
    test_Kinematics(para, pos, goal, so, ao, ss, sa, cd, sr);
    return R_NilValue;
END_RCPP
}
// test_Parameters
void test_Parameters(Rcpp::List x);
RcppExport SEXP _commotions_test_Parameters(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    test_Parameters(x);
    return R_NilValue;
END_RCPP
}
// test_KCollide
double test_KCollide(arma::vec pos, arma::vec goal, double init_speed, double init_angle, double x, double y, double speed, double angle, double obs_x, double obs_y);
RcppExport SEXP _commotions_test_KCollide(SEXP posSEXP, SEXP goalSEXP, SEXP init_speedSEXP, SEXP init_angleSEXP, SEXP xSEXP, SEXP ySEXP, SEXP speedSEXP, SEXP angleSEXP, SEXP obs_xSEXP, SEXP obs_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< double >::type init_speed(init_speedSEXP);
    Rcpp::traits::input_parameter< double >::type init_angle(init_angleSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type speed(speedSEXP);
    Rcpp::traits::input_parameter< double >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< double >::type obs_x(obs_xSEXP);
    Rcpp::traits::input_parameter< double >::type obs_y(obs_ySEXP);
    rcpp_result_gen = Rcpp::wrap(test_KCollide(pos, goal, init_speed, init_angle, x, y, speed, angle, obs_x, obs_y));
    return rcpp_result_gen;
END_RCPP
}
// test_Simulation
void test_Simulation(arma::vec ts);
RcppExport SEXP _commotions_test_Simulation(SEXP tsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ts(tsSEXP);
    test_Simulation(ts);
    return R_NilValue;
END_RCPP
}
// test_Initialize
void test_Initialize(arma::vec ts, arma::mat pos, arma::mat goal, std::vector<double> speeds, std::vector<double> angles);
RcppExport SEXP _commotions_test_Initialize(SEXP tsSEXP, SEXP posSEXP, SEXP goalSEXP, SEXP speedsSEXP, SEXP anglesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type ts(tsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pos(posSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type goal(goalSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type speeds(speedsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type angles(anglesSEXP);
    test_Initialize(ts, pos, goal, speeds, angles);
    return R_NilValue;
END_RCPP
}
// test_pAgent
int test_pAgent(std::string s0, std::string s1);
RcppExport SEXP _commotions_test_pAgent(SEXP s0SEXP, SEXP s1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s0(s0SEXP);
    Rcpp::traits::input_parameter< std::string >::type s1(s1SEXP);
    rcpp_result_gen = Rcpp::wrap(test_pAgent(s0, s1));
    return rcpp_result_gen;
END_RCPP
}
// test_List
int test_List(Rcpp::List x);
RcppExport SEXP _commotions_test_List(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_List(x));
    return rcpp_result_gen;
END_RCPP
}
// test_find
int test_find(unsigned int a);
RcppExport SEXP _commotions_test_find(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(test_find(a));
    return rcpp_result_gen;
END_RCPP
}
// test_switch
int test_switch(unsigned int a);
RcppExport SEXP _commotions_test_switch(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(test_switch(a));
    return rcpp_result_gen;
END_RCPP
}
// test_arma_find
arma::uvec test_arma_find(double cd, arma::vec proj_signed_dist_to_CP);
RcppExport SEXP _commotions_test_arma_find(SEXP cdSEXP, SEXP proj_signed_dist_to_CPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type cd(cdSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type proj_signed_dist_to_CP(proj_signed_dist_to_CPSEXP);
    rcpp_result_gen = Rcpp::wrap(test_arma_find(cd, proj_signed_dist_to_CP));
    return rcpp_result_gen;
END_RCPP
}
// is_cross
bool is_cross(std::vector<double> segment0, std::vector<double> segment1);
RcppExport SEXP _commotions_is_cross(SEXP segment0SEXP, SEXP segment1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type segment0(segment0SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type segment1(segment1SEXP);
    rcpp_result_gen = Rcpp::wrap(is_cross(segment0, segment1));
    return rcpp_result_gen;
END_RCPP
}
// get_intersection_of_lines
arma::vec get_intersection_of_lines(arma::vec line1_pointA, arma::vec line1_pointB, arma::vec line2_pointA, arma::vec line2_pointB);
RcppExport SEXP _commotions_get_intersection_of_lines(SEXP line1_pointASEXP, SEXP line1_pointBSEXP, SEXP line2_pointASEXP, SEXP line2_pointBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type line1_pointA(line1_pointASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type line1_pointB(line1_pointBSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type line2_pointA(line2_pointASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type line2_pointB(line2_pointBSEXP);
    rcpp_result_gen = Rcpp::wrap(get_intersection_of_lines(line1_pointA, line1_pointB, line2_pointA, line2_pointB));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_commotions_run", (DL_FUNC) &_commotions_run, 10},
    {"_commotions_test_P2P", (DL_FUNC) &_commotions_test_P2P, 12},
    {"_commotions_test_V2V", (DL_FUNC) &_commotions_test_V2V, 11},
    {"_commotions_test_P2V", (DL_FUNC) &_commotions_test_P2V, 11},
    {"_commotions_test_SC_P2V_tmp", (DL_FUNC) &_commotions_test_SC_P2V_tmp, 12},
    {"_commotions_test_regspace", (DL_FUNC) &_commotions_test_regspace, 3},
    {"_commotions_test_armaregspace", (DL_FUNC) &_commotions_test_armaregspace, 3},
    {"_commotions_test_Kinematics_old", (DL_FUNC) &_commotions_test_Kinematics_old, 6},
    {"_commotions_test_Kinematics", (DL_FUNC) &_commotions_test_Kinematics, 9},
    {"_commotions_test_Parameters", (DL_FUNC) &_commotions_test_Parameters, 1},
    {"_commotions_test_KCollide", (DL_FUNC) &_commotions_test_KCollide, 10},
    {"_commotions_test_Simulation", (DL_FUNC) &_commotions_test_Simulation, 1},
    {"_commotions_test_Initialize", (DL_FUNC) &_commotions_test_Initialize, 5},
    {"_commotions_test_pAgent", (DL_FUNC) &_commotions_test_pAgent, 2},
    {"_commotions_test_List", (DL_FUNC) &_commotions_test_List, 1},
    {"_commotions_test_find", (DL_FUNC) &_commotions_test_find, 1},
    {"_commotions_test_switch", (DL_FUNC) &_commotions_test_switch, 1},
    {"_commotions_test_arma_find", (DL_FUNC) &_commotions_test_arma_find, 2},
    {"_commotions_is_cross", (DL_FUNC) &_commotions_is_cross, 2},
    {"_commotions_get_intersection_of_lines", (DL_FUNC) &_commotions_get_intersection_of_lines, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_commotions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
